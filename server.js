const express = require("express");
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const sharp = require("sharp");
const Jimp = require("jimp");
const tf = require("@tensorflow/tfjs-node");
const math = require("mathjs");
const cors=require("cors")

const app = express();
const port = 5000;

app.use(cors())

// **F√°jlfelt√∂lt√©s be√°ll√≠t√°sa**
const upload = multer({ dest: "uploads/" });

// **TensorFlow modell bet√∂lt√©se**
let model;
(async () => {
    try {
        model = await tf.loadLayersModel("file://model/model.json");
        console.log("‚úÖ Saj√°t betan√≠tott modell bet√∂ltve!");
    } catch (error) {
        console.error("‚ùå Hiba a modell bet√∂lt√©se sor√°n:", error);
    }
})();

/**
 * **Karakterhat√°rok detekt√°l√°sa √©s pontos kiv√°g√°s (extra 20px fent √©s lent)**
 */
async function segmentImage(imagePath) {
    try {
        const processedImagePath = path.join(__dirname,"uploads", "processed_image.png");

        // **1Ô∏è‚É£ K√©p el≈ëfeldolgoz√°sa**
        await sharp(imagePath)
            .greyscale()
            .threshold(160) // K√ºsz√∂b√∂l√©s fekete-feh√©r √°talak√≠t√°shoz
            .sharpen()
            .toFile(processedImagePath);

        console.log("‚úÖ K√©p el≈ëfeldolgozva:", processedImagePath);

        // **2Ô∏è‚É£ K√©p bet√∂lt√©se Jimp-pel**
        const image = await Jimp.read(processedImagePath);
        const width = image.bitmap.width;
        const height = image.bitmap.height;

        let columnSums = new Array(width).fill(0);
        let rowSums = new Array(height).fill(0);

        // **3Ô∏è‚É£ Oszloponk√©nt √©s soronk√©nt v√©gigmegy√ºnk a k√©pen**
        for (let x = 0; x < width; x++) {
            for (let y = 0; y < height; y++) {
                const pixel = Jimp.intToRGBA(image.getPixelColor(x, y));
                if (pixel.r < 128) { // Ha a pixel fekete
                    columnSums[x]++;
                    rowSums[y]++;
                }
            }
        }

        // **4Ô∏è‚É£ Hat√°rok keres√©se a karakterek k√∂z√∂tt (v√≠zszintesen)**
        let boundaries = [];
        let inChar = false;
        let start = 0;

        for (let x = 0; x < width; x++) {
            if (columnSums[x] > 2) { // Ha van fekete pixel az oszlopban
                if (!inChar) {
                    start = Math.max(x - 60, 0); // Kis r√°hagy√°s balra
                    inChar = true;
                }
            } else {
                if (inChar) {
                    let end = Math.min(x + 60, width); // Kis r√°hagy√°s jobbra
                    if (end - start > 10) { // Ha t√∫l keskeny, ne v√°gjuk meg
                        boundaries.push({ start, end });
                    }
                    inChar = false;
                }
            }
        }

        // **5Ô∏è‚É£ Karakterek magass√°g√°nak meghat√°roz√°sa (extra 20px fent √©s lent)**
        let minY = 0, maxY = height;
        for (let y = 0; y < height; y++) {
            if (rowSums[y] > 2) {
                minY = Math.max(y - 30, 0); // Extra 20px fent
                break;
            }
        }
        for (let y = height - 1; y >= 0; y--) {
            if (rowSums[y] > 2) {
                maxY = Math.min(y + 30, height); // Extra 20px lent
                break;
            }
        }

        // **üí° Ha t√∫l keskeny a bounding box, adjunk minim√°lis magass√°got**
        if (maxY - minY < 50) {
            let centerY = (minY + maxY) / 2;
            minY = Math.max(centerY - 25, 0);
            maxY = Math.min(centerY + 25, height);
        }

        // **6Ô∏è‚É£ Debug k√©p gener√°l√°sa (Piros vonalakkal a hat√°rokn√°l)**
        for (let i = 0; i < boundaries.length; i++) {
            let { end } = boundaries[i];
            for (let y = 0; y < height; y++) {
                image.setPixelColor(Jimp.rgbaToInt(255, 0, 0, 255), end, y);
            }
        }

        const debugImagePath = path.join(__dirname, "uploads", "debug_boundaries.png");
        await image.writeAsync(debugImagePath);
        console.log("‚úÖ Debug k√©p mentve:", debugImagePath);

        // **7Ô∏è‚É£ Karakterek kiv√°g√°sa (extra 20px fent √©s lent, minimum magass√°ggal)**
        let extractedChars = [];
        for (let i = 0; i < boundaries.length; i++) {
            let { start, end } = boundaries[i];

            let charWidth = end - start;
            let charImagePath = path.join(__dirname,"uploads",  `char_${i}.png`);
            
            await sharp(processedImagePath)
                .extract({
                    left: Math.max(start, 0),
                    top: minY,
                    width: Math.min(charWidth + 10, width - start), // Extra sz√©less√©g
                    height: Math.min(maxY - minY, height) // Extra 20px fent √©s lent
                })
                .resize(28, 28) // Neur√°lis h√°l√≥hoz igaz√≠t√°s
                .toFile(charImagePath);

            extractedChars.push(charImagePath);
        }

        console.log("‚úÖ Kiv√°gott karakterek:", extractedChars);
        return { extractedChars, debugImagePath };

    } catch (error) {
        console.error("‚ùå Hiba a karakterek kiv√°g√°sa sor√°n:", error);
        return { extractedChars: [], debugImagePath: null };
    }
}

/**
 * **Karakterek felismer√©se a betan√≠tott modellel**
 */
async function recognizeCharacter(imagePath) {
    try {
        const imageBuffer = fs.readFileSync(imagePath);
        let tensor = tf.node.decodeImage(imageBuffer)
            .resizeNearestNeighbor([28, 28])
            .mean(2) // Sz√ºrke√°rnyalatoss√° konvert√°l√°s
            .expandDims(0)
            .expandDims(-1) // Egycsatorn√°s k√©p (grayscale)
            .toFloat()
            .div(255); // Normaliz√°l√°s [0,1] k√∂z√©

        const prediction = model.predict(tensor);
        const predictedIndex = prediction.argMax(1).dataSync()[0];

        const ALLOWED_CHARACTERS = "0123456789+-*/=";
        return ALLOWED_CHARACTERS[predictedIndex] || "?"; // Ha nem tal√°lhat√≥, akkor "?"
    } catch (error) {
        console.error("‚ùå Hiba a karakter felismer√©se sor√°n:", error);
        return "?";
    }
}

app.use("/uploads", express.static(path.join(__dirname, "uploads")));


// **API v√©gpont a k√©p feldolgoz√°s√°hoz**
app.post("/recognize", upload.single("image"), async (req, res) => {
    if (!req.file) {
        return res.status(400).json({ error: "Nincs felt√∂lt√∂tt k√©p." });
    }

    try {
        const { extractedChars, debugImagePath } = await segmentImage(req.file.path);

        if (extractedChars.length === 0) {
            return res.json({ message: "Nem tal√°lt karaktereket a k√©pen." });
        }

        let recognizedText = "";
        let recognizedCharacters = [];

        // **Karakterek felismer√©se saj√°t modellel**
        for (let i = 0; i < extractedChars.length; i++) {
            let recognizedChar = await recognizeCharacter(extractedChars[i]);
            recognizedText += recognizedChar;
            recognizedCharacters.push({ image: path.basename(extractedChars[i]), recognized: recognizedChar });
        }

        console.log("‚úÖ Felismert kifejez√©s:", recognizedText);
        

        let parsedFormula;
        try {
            parsedFormula = math.evaluate(recognizedText);
        } catch (err) {
            parsedFormula = "Hib√°s kifejez√©s";
        }

        // **Visszak√ºldj√ºk az eredm√©nyt**
        res.json({
            raw_text: recognizedText,
            parsed_formula: parsedFormula,
            characters: recognizedCharacters
        });

        // **Felt√∂lt√∂tt f√°jl t√∂rl√©se**
        fs.unlinkSync(req.file.path);

    } catch (error) {
        console.error("‚ùå Hiba a feldolgoz√°s sor√°n:", error);
        res.status(500).json({ error: "Feldolgoz√°si hiba." });
    }
});

/**
 * **√öj tanul√°si adat hozz√°ad√°sa**
 */
app.post("/train", express.json(), (req, res) => {
    const { image, correct_label } = req.body;

    if (!image || !correct_label) {
        return res.status(400).json({ error: "Hi√°nyz√≥ adatok a tan√≠t√°shoz." });
    }

    // **Az uploads mapp√°b√≥l keress√ºk meg a f√°jlt**
    const imagePath = path.join(__dirname, "uploads", image);

    if (!fs.existsSync(imagePath)) {
        return res.status(404).json({ error: "A megadott k√©p nem tal√°lhat√≥." });
    }

    try {
        // **√öj hely a tanul√°si mapp√°ban**
        const trainingPath = path.join("training_data", `${Date.now()}_${correct_label}.png`);

        // **F√°jl m√°sol√°sa a tanul√°si mapp√°ba**
        fs.copyFileSync(imagePath, trainingPath);
        console.log(`üìù Tan√≠t√°si adatokhoz hozz√°adva: ${trainingPath}`);

        res.json({ message: "Tan√≠t√°si adat mentve!", image, correct_label });
    } catch (error) {
        console.error("‚ùå Hiba a tan√≠t√°si adat ment√©se sor√°n:", error);
        res.status(500).json({ error: "Nem siker√ºlt menteni a tan√≠t√°shoz." });
    }
});


// **Szerver ind√≠t√°sa**
app.listen(port, () => {
    console.log(`‚úÖ Szerver fut: http://localhost:${port}`);
});
