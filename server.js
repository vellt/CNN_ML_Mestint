const express = require("express");
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const tf = require("@tensorflow/tfjs-node");
const math = require("mathjs");
const cors=require("cors")
const { segmentImage } = require("./imageProcessing");
const { CHARACTERS } = require("./train_constants");

const app = express();
const port = 5000;

app.use(cors())

// **F√°jlfelt√∂lt√©s be√°ll√≠t√°sa**
const upload = multer({ dest: "uploads/" });

// **TensorFlow modell bet√∂lt√©se**
let model;
(async () => {
    try {
        model = await tf.loadLayersModel("file://model/model.json");
        console.log("‚úÖ Saj√°t betan√≠tott modell bet√∂ltve!");
    } catch (error) {
        console.error("‚ùå Hiba a modell bet√∂lt√©se sor√°n:", error);
    }
})();

/**
 * **Karakterek felismer√©se a betan√≠tott modellel**
 */
async function recognizeCharacter(imagePath) {
    try {
        const imageBuffer = fs.readFileSync(imagePath);
        let tensor = tf.node.decodeImage(imageBuffer,1) // k√©p √°talak√≠t√°sa 1 csatorn√°ss√°
            .toFloat().div(255) // Normaliz√°l√°s [0,1] k√∂z√∂tti sz√°mokkal
            .expandDims(); // (1,28,28,1) alakra hoz√°s

        const prediction = model.predict(tensor);
        const predictedIndex = prediction.argMax(1).dataSync()[0];
        
        return CHARACTERS[predictedIndex] || "?"; // Ha nem tal√°lhat√≥, akkor "?"
    } catch (error) {
        console.error("‚ùå Hiba a karakter felismer√©se sor√°n:", error);
        return "?";
    }
}

app.use("/uploads", express.static(path.join(__dirname, "uploads")));


// **API v√©gpont a k√©p feldolgoz√°s√°hoz**
app.post("/recognize", upload.single("image"), async (req, res) => {
    if (!req.file) {
        return res.status(400).json({ error: "Nincs felt√∂lt√∂tt k√©p." });
    }

    try {
        const { extractedChars } = await segmentImage(req.file.path);

        if (extractedChars.length === 0) {
            return res.json({ message: "Nem tal√°lt karaktereket a k√©pen." });
        }

        let recognizedText = "";
        let recognizedCharacters = [];

        // **Karakterek felismer√©se saj√°t modellel**
        for (let i = 0; i < extractedChars.length; i++) {
            let recognizedChar = await recognizeCharacter(extractedChars[i]);
            recognizedText += recognizedChar;
            recognizedCharacters.push({ image: path.basename(extractedChars[i]), recognized: recognizedChar });
        }

        console.log("‚úÖ Felismert kifejez√©s:", recognizedText);
        

        let parsedFormula;
        try {
            parsedFormula = math.evaluate(recognizedText);
        } catch (err) {
            parsedFormula = "Hib√°s kifejez√©s";
        }

        // **Visszak√ºldj√ºk az eredm√©nyt**
        res.json({
            raw_text: recognizedText,
            parsed_formula: parsedFormula,
            characters: recognizedCharacters
        });

        // **Felt√∂lt√∂tt f√°jl t√∂rl√©se**
        fs.unlinkSync(req.file.path);

    } catch (error) {
        console.error("‚ùå Hiba a feldolgoz√°s sor√°n:", error);
        res.status(500).json({ error: "Feldolgoz√°si hiba." });
    }
});

/**
 * **√öj tanul√°si adat hozz√°ad√°sa**
 */
app.post("/train", express.json(), (req, res) => {
    const { image: imageName, correct_label } = req.body;

    if (!imageName || !correct_label) {
        return res.status(400).json({ error: "Hi√°nyz√≥ adatok a tan√≠t√°shoz." });
    }

    // **Az uploads mapp√°b√≥l keress√ºk meg a f√°jlt**
    const imagePath = path.join(__dirname, "uploads", imageName);

    if (!fs.existsSync(imagePath)) {
        return res.status(404).json({ error: "A megadott k√©p nem tal√°lhat√≥." });
    }

    try {
        // **√öj hely a tanul√°si mapp√°ban**
        const trainingPath = path.join("training_data", `${Date.now()}_${correct_label}.png`);

        // **F√°jl m√°sol√°sa a tanul√°si mapp√°ba**
        fs.copyFileSync(imagePath, trainingPath);
        console.log(`üìù Tan√≠t√°si adatokhoz hozz√°adva: ${trainingPath}`);

        res.json({ message: "Tan√≠t√°si adat mentve!", image: imageName, correct_label });
    } catch (error) {
        console.error("‚ùå Hiba a tan√≠t√°si adat ment√©se sor√°n:", error);
        res.status(500).json({ error: "Nem siker√ºlt menteni a tan√≠t√°shoz." });
    }
});


// **Szerver ind√≠t√°sa**
app.listen(port, () => {
    console.log(`‚úÖ Szerver fut: http://localhost:${port}`);
});
