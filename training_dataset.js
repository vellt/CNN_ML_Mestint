const fs = require("fs");
const path = require("path");
const tf = require("@tensorflow/tfjs-node");
const Jimp = require("jimp");
const { CHARACTERS  } = require("./train_constants");

const TRAINING_PATH = "./training_data";  



/**
 * **K√©p augment√°ci√≥ (forgat√°s, elmos√°s)**
 */
async function augmentImage(image) {
    let augmentedImages = [];

    // 1Ô∏è‚É£ Eredeti k√©p ment√©se
    augmentedImages.push(image.clone());

    // 2Ô∏è‚É£ Forgat√°s (¬±15 fok)
    let rotatedClockwise = image.clone().rotate(15); // Jobbra forgat√°s
    let rotatedCounterClockwise = image.clone().rotate(-15); // Balra forgat√°s
    augmentedImages.push(rotatedClockwise);
    augmentedImages.push(rotatedCounterClockwise);

    // 3Ô∏è‚É£ Elmos√°s (Gaussian blur)
    let blurred = image.clone().blur(1);
    augmentedImages.push(blurred);

    return augmentedImages;
}

/**
 * **K√©pek bet√∂lt√©se √©s augment√°l√°sa**
 */
async function loadImagesFromTrainingData() {
    let dataset = [];
    console.log("üì• Manu√°lis tan√≠t√°si adatok bet√∂lt√©se...");

    const trainingFiles = fs.readdirSync(TRAINING_PATH);

    for (const file of trainingFiles) {
        if (file.endsWith(".png")) {
            const character = file.split('_').pop().split('.')[0]; // Karakter kinyer√©se

            if (!CHARACTERS.includes(character)) {
                console.warn(`‚ö†Ô∏è Figyelmeztet√©s: Ismeretlen c√≠mke "${character}" a f√°jlban: ${file}`);
                continue;
            }

            const label = CHARACTERS.indexOf(character); // label k√©sz√≠t√©se

            // **Eredeti k√©p bet√∂lt√©se Jimp-pel**
            const jimpImage = await Jimp.read(path.join(TRAINING_PATH, file));

            // **Augment√°ci√≥ alkalmaz√°sa**
            const augmentedImages = await augmentImage(jimpImage);

            for (const augImage of augmentedImages) {
                // K√©p beolvas√°sa √©s √°talak√≠t√°sa TensorFlow form√°tumra
                const buffer = await augImage.getBufferAsync(Jimp.MIME_PNG);
                let tensor = tf.node.decodeImage(buffer,1) // 1 = grayscale form√°tum k√∂zvetlen√ºl
                    .resizeNearestNeighbor([28, 28]) 
                    .toFloat() .div(255) // Normaliz√°l√°s 0-1 k√∂z√©
            
                dataset.push({ tensor, label });
            }
        }
    }

    console.log(`üìä Bet√∂lt√∂tt training dataset m√©rete (eredeti + augment√°lt): ${dataset.length} k√©p`);
    return dataset;
}

module.exports = { loadImagesFromTrainingData };
